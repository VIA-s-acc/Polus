# This viminfo file was generated by Vim 7.4.
# You may edit it if you're careful!

# Value of 'encoding' when this file was written
*encoding=utf-8


# hlsearch on (H) or off (h):
~H
# Last Search Pattern:
~MSle0~/bin

# Command Line History (newest to oldest):
:wq
:q
:q!
:d
:59, 82 d
:set number
:1, 157 d
:150
:'<,'>1, 157
:'<1,157'>
:'<,'>1
:1, 157 y
:1,15d
:1, 16 d
:1, 70 d
:1,83 d
:set num
:1, 76 d
:1,10 d
:1, 62d
:1, 62 rm
:w
:1, 3 d
:1 3 d
:1, 50 d
:1, 100 d
:d 1 500
:wqe
:1,52 d
:rm 1, 56
:60d
:56d
:48d
:34 d
:30 d
:30d; 35d
:20d, 35d
:26 d
:'<,'>d
:1, 89 d
:1, 
:dd
:25, 28 y
:y
:63 y
:36
:12, 25 y
:12, 
:p
:1, 49y

# Search String History (newest to oldest):
?/bin/bash

# Expression History (newest to oldest):

# Input Line History (newest to oldest):

# Input Line History (newest to oldest):

# Registers:
"0	LINE	0
	#include <stdio.h>
	#include <mpi.h>
	#include <stdlib.h>
	#include <math.h>
	
	// Function to read local part of matrix A and vector b from files
	void read_local_matrix_and_vector(double **A, double *b, int n, const char *fileA_name, const char *fileB_name, int rank, int size) {
	    FILE *fileA = fopen(fileA_name, "r");
	    if (!fileA) {
	        fprintf(stderr, "Error opening file %s\n", fileA_name);
	        MPI_Abort(MPI_COMM_WORLD, 1);
	    }
	    
	    int row_start = rank * (n / size);
	    int local_rows = (rank == size - 1) ? n - row_start : n / size;
	
	    // Skip rows that do not belong to the current process
	    fseek(fileA, row_start * n * sizeof(double), SEEK_SET);
	    
	    for (int i = 0; i < local_rows; i++) {
	        for (int j = 0; j < n; j++) {
	            fscanf(fileA, "%lf", &A[i][j]);
	        }
	    }
	    fclose(fileA);
	
	    FILE *fileB = fopen(fileB_name, "r");
	    if (!fileB) {
	        fprintf(stderr, "Error opening file %s\n", fileB_name);
	        MPI_Abort(MPI_COMM_WORLD, 1);
	    }
	    
	    fseek(fileB, row_start * sizeof(double), SEEK_SET);
	    for (int i = 0; i < local_rows; i++) {
	        fscanf(fileB, "%lf", &b[i]);
	    }
	    fclose(fileB);
	}
	
	// Jacobi method for solving Ax = b
	void jacobi_method(double **A, double *b, double *x, int n, double eps, int rank, int size) {
	    int i, j;
	    int row_start = rank * (n / size);
	    int local_rows = (rank == size - 1) ? n - row_start : n / size;
	    double *local_x = (double *)malloc(local_rows * sizeof(double));
	    double *new_x = (double *)malloc(local_rows * sizeof(double));
	    double max_diff;
	
	    // Arrays for gathering the results
	    int *recvcounts = (int *)malloc(size * sizeof(int));
"1	LINE	0
	:d
"2	LINE	0
	# –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
"3	LINE	0
	while true; do
	    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –±–µ–∑ < –∏ >
	    out_file="$program.$job_id.out"
	    err_file="$program.$job_id.err"
	
	    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	    echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤: $out_file –∏ $err_file..."
	    
	    # –ï—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	    if [ -f "$out_file" ] && [ -f "$err_file" ]; then
	        echo "–§–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã. –°–æ—Ö—Ä–∞–Ω—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã..."
	        cat "$out_file" "$err_file" > "$program.res"
	        
	        # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
	        rm -f "$program" "$out_file" "$err_file" "$program.*"
	        
	        echo "–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $program.res."
	        break
	    else
	        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ 2 —Å–µ–∫—É–Ω–¥)
	        sleep 2
	    fi
	done
	
"4	LINE	0
	#include <stdio.h>
	#include <mpi.h>
	#include <stdlib.h>
	#include <math.h>
	
	// Function to read local part of matrix A and vector b from files
	void read_local_matrix_and_vector(double **A, double *b, int n, const char *fileA_name, const char *fileB_name, int rank, int size) {
	    FILE *fileA = fopen(fileA_name, "r");
	    if (!fileA) {
	        fprintf(stderr, "Error opening file %s\n", fileA_name);
	        MPI_Abort(MPI_COMM_WORLD, 1);
	    }
	    
	    int row_start = rank * (n / size);
	    int local_rows = (rank == size - 1) ? n - row_start : n / size;
	
	    // Skip rows that do not belong to the current process
	    fseek(fileA, row_start * n * sizeof(double), SEEK_SET);
	    
	    for (int i = 0; i < local_rows; i++) {
	        for (int j = 0; j < n; j++) {
	            fscanf(fileA, "%lf", &A[i][j]);
	        }
	    }
	    fclose(fileA);
	
	    FILE *fileB = fopen(fileB_name, "r");
	    if (!fileB) {
	        fprintf(stderr, "Error opening file %s\n", fileB_name);
	        MPI_Abort(MPI_COMM_WORLD, 1);
	    }
	    
	    fseek(fileB, row_start * sizeof(double), SEEK_SET);
	    for (int i = 0; i < local_rows; i++) {
	        fscanf(fileB, "%lf", &b[i]);
	    }
	    fclose(fileB);
	}
	
	// Jacobi method for solving Ax = b
	void jacobi_method(double **A, double *b, double *x, int n, double eps, int rank, int size) {
	    int i, j;
	    int row_start = rank * (n / size);
	    int local_rows = (rank == size - 1) ? n - row_start : n / size;
	    double *local_x = (double *)malloc(local_rows * sizeof(double));
	    double *new_x = (double *)malloc(local_rows * sizeof(double));
	    double max_diff;
	
	    // Arrays for gathering the results
	    int *recvcounts = (int *)malloc(size * sizeof(int));
"5	LINE	0
	#!/bin/bash
	
	# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	check_param() {
	    if [ -z "$1" ]; then
	        echo "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä $2 –Ω–µ –∑–∞–¥–∞–Ω."
	        exit 1
	    fi
	}
	
	# –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	while [ "$1" != "" ]; do
	    case $1 in
	        -p )    shift
	                num_proc=$1
	                ;;
	        -N )    shift
	                N=$1
	                ;;
	        -eps )  shift
	                eps=$1
	                ;;
	        -A )    shift
	                A=$1
	                ;;
	        -b )    shift
	                b=$1
	                ;;
	        -source ) shift
	                source=$1
	                ;;
	        -program ) shift
	                program=$1
	                ;;
	        * )     echo "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
	                exit 1
	    esac
	    shift
	done
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	check_param "$num_proc" "-p num_proc"
	check_param "$N" "-N"
	check_param "$eps" "-eps"
	check_param "$A" "-A"
	check_param "$b" "-b"
	check_param "$source" "-source"
	check_param "$program" "-program"
	
	# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
"6	LINE	0
	#!/bin/bash
	
	# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	check_param() {
	    if [ -z "$1" ]; then
	        echo "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä $2 –Ω–µ –∑–∞–¥–∞–Ω."
	        exit 1
	    fi
	}
	
	# –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	while [ "$1" != "" ]; do
	    case $1 in
	        -p )    shift
	                num_proc=$1
	                ;;
	        -N )    shift
	                N=$1
	                ;;
	        -eps )  shift
	                eps=$1
	                ;;
	        -A )    shift
	                A=$1
	                ;;
	        -b )    shift
	                b=$1
	                ;;
	        -source ) shift
	                source=$1
	                ;;
	        -program ) shift
	                program=$1
	                ;;
	        * )     echo "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
	                exit 1
	    esac
	    shift
	done
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	check_param "$num_proc" "-p num_proc"
	check_param "$N" "-N"
	check_param "$eps" "-eps"
	check_param "$A" "-A"
	check_param "$b" "-b"
	check_param "$source" "-source"
	check_param "$program" "-program"
	
	# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
"7	LINE	0
	        rm -f "$program" "$program.$job_id.out" "$program.$job_id.err" "$program.*"
	        
	        echo "–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $program.res."
	        break
	    else
	        # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —Å–µ–∫—É–Ω–¥–∞)
	        sleep 1
	    fi
	done
	
"8	LINE	0
	#!/bin/bash
	
	# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	check_param() {
	    if [ -z "$1" ]; then
	        echo "–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä $2 –Ω–µ –∑–∞–¥–∞–Ω."
	        exit 1
	    fi
	}
	
	# –†–∞–∑–±–æ—Ä –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
	while [ "$1" != "" ]; do
	    case $1 in
	        -p )    shift
	                num_proc=$1
	                ;;
	        -N )    shift
	                N=$1
	                ;;
	        -eps )  shift
	                eps=$1
	                ;;
	        -A )    shift
	                A=$1
	                ;;
	        -b )    shift
	                b=$1
	                ;;
	        -source ) shift
	                source=$1
	                ;;
	        -program ) shift
	                program=$1
	                ;;
	        * )     echo "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
	                exit 1
	    esac
	    shift
	done
	
	# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
	check_param "$num_proc" "-p num_proc"
	check_param "$N" "-N"
	check_param "$eps" "-eps"
	check_param "$A" "-A"
	check_param "$b" "-b"
	check_param "$source" "-source"
	check_param "$program" "-program"
	
	# –ö–æ–º–ø–∏–ª—è—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
"9	LINE	0
	
	# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
	mpisubmit.pl -p "$num_proc" ./"$program" -- N="$N" eps="$eps" A="$A" b="$b"
"s	CHAR	0
	sÄku:w:qnÄkuÄk1ÄkuÄkuÄku:Äkb
""-	CHAR	0
	p

# File marks:
'0  213  4  ~/prac/test.c
'1  17  29  ~/prac/test.c
'2  16  10  ~/prac/test.c
'3  10  9  ~/prac/run.sh
'4  1  0  ~/prac/test.c
'5  1  0  ~/prac/A.bat
'6  35  8  ~/prac/test.c
'7  120  16  ~/prac/test.c
'8  7  0  ~/prac/generator.py
'9  2  0  ~/prac/generator.py

# Jumplist (newest first):
-'  213  4  ~/prac/test.c
-'  17  4  ~/prac/test.c
-'  16  4  ~/prac/test.c
-'  35  4  ~/prac/test.c
-'  10  9  ~/prac/run.sh
-'  1  0  ~/prac/run.sh
-'  1  0  ~/prac/test.c
-'  1  0  ~/prac/A.bat
-'  120  8  ~/prac/test.c
-'  105  4  ~/prac/test.c
-'  7  0  ~/prac/generator.py
-'  2  0  ~/prac/generator.py
-'  1  0  ~/prac/generator.py
-'  91  0  ~/prac/generator.py
-'  180  1  ~/prac/generator.py
-'  92  0  ~/prac/generator.py
-'  93  0  ~/prac/generator.py
-'  176  1  ~/prac/generator.py
-'  26  4  ~/prac/test.c
-'  61  0  ~/prac/run.sh
-'  62  0  ~/prac/run.sh
-'  3  10  ~/prac/clear.sh
-'  1  0  ~/prac/clear.sh
-'  174  5  ~/prac/generator.py
-'  123  36  ~/prac/run.sh
-'  146  4  ~/prac/run.sh
-'  64  0  ~/prac/run.sh
-'  145  0  ~/prac/run.sh
-'  266  0  ~/prac/generator.py
-'  1  0  ~/prac/generator.pyt
-'  342  0  ~/prac/generator.py
-'  329  4  ~/prac/generator.py
-'  334  4  ~/prac/generator.py
-'  327  4  ~/prac/generator.py
-'  321  8  ~/prac/generator.py
-'  313  12  ~/prac/generator.py
-'  299  4  ~/prac/generator.py
-'  295  0  ~/prac/generator.py
-'  291  0  ~/prac/generator.py
-'  287  0  ~/prac/generator.py
-'  282  14  ~/prac/generator.py
-'  276  4  ~/prac/generator.py
-'  278  0  ~/prac/generator.py
-'  269  0  ~/prac/generator.py
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/generator.pyt
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/r
-'  1  0  ~/prac/generator.pyt
-'  59  0  ~/prac/run.sh
-'  60  0  ~/prac/run.sh
-'  3  10  ~/prac/clear.sh
-'  1  0  ~/prac/clear.sh
-'  121  36  ~/prac/run.sh
-'  144  4  ~/prac/run.sh
-'  3  10  ~/prac/clear.sh
-'  1  0  ~/prac/clear.sh
-'  1  0  ~/prac/generator.pyt
-'  5  0  ~/prac/generator.py
-'  6  0  ~/prac/generator.py
-'  89  1  ~/prac/generator.py
-'  3  10  ~/prac/clear.sh
-'  1  0  ~/prac/clear.sh
-'  87  5  ~/prac/generator.py
-'  7  0  ~/prac/generator.py
-'  2  0  ~/prac/generator.py
-'  1  0  ~/prac/generator.py
-'  91  0  ~/prac/generator.py
-'  180  1  ~/prac/generator.py
-'  1  0  ~/prac/A.bat
-'  7  0  ~/prac/generator.py
-'  1  0  ~/prac/A.bat
-'  10  9  ~/prac/run.sh
-'  1  0  ~/prac/run.sh
-'  1  0  ~/prac/A.bat
-'  7  0  ~/prac/generator.py
-'  2  0  ~/prac/generator.py
-'  1  0  ~/prac/generator.py
-'  91  0  ~/prac/generator.py
-'  180  1  ~/prac/generator.py
-'  10  9  ~/prac/run.sh
-'  1  0  ~/prac/run.sh
-'  18  28  ~/prac/test.c

# History of marks within files (newest to oldest):

> ~/prac/test.c
	"	213	4
	^	17	30
	.	17	29
	+	1	0
	+	1	2
	+	1	1
	+	1	33
	+	1	0
	+	1	0
	+	1	0
	+	1	15
	+	1	1
	+	1	15
	+	1	0
	+	1	0
	+	1	15
	+	1	25
	+	1	10
	+	1	49
	+	1	29
	+	1	30
	+	1	0
	+	1	31
	+	1	0
	+	1	48
	+	1	15
	+	1	15
	+	1	15
	+	1	15
	+	1	15
	+	1	0
	+	1	14
	+	1	14
	+	1	25
	+	1	0
	+	1	14
	+	1	88
	+	1	42
	+	1	44
	+	1	0
	+	1	19
	+	1	36
	+	1	19
	+	1	56
	+	1	58
	+	1	0
	+	1	0
	+	1	57
	+	1	57
	+	1	0
	+	1	53
	+	1	54
	+	1	48
	+	1	0
	+	1	0
	+	1	0
	+	1	0
	+	1	1
	+	1	43
	+	1	0
	+	1	0
	+	1	16
	+	1	123
	+	1	63
	+	1	32
	+	1	15
	+	1	32
	+	1	3
	+	1	29
	+	1	2
	+	1	2
	+	1	14
	+	1	31
	+	1	32
	+	1	31
	+	1	31
	+	1	0
	+	1	2
	+	1	2
	+	1	2
	+	1	17
	+	1	26
	+	1	57
	+	1	58
	+	1	41
	+	1	39
	+	1	0
	+	1	12
	+	1	20
	+	1	8
	+	1	0
	+	1	9
	+	1	26
	+	1	18
	+	1	16
	+	1	18
	+	1	0
	+	120	16
	+	16	9
	+	17	27
	+	15	66
	+	17	17
	+	17	29

> ~/prac/run.sh
	"	10	9
	^	10	10
	.	10	9
	+	1	13
	+	1	75
	+	1	0
	+	1	0
	+	1	0
	+	1	11
	+	1	4
	+	1	11
	+	1	11
	+	1	8
	+	1	13
	+	145	0
	+	64	13
	+	146	0
	+	123	40
	+	123	36
	+	62	0
	+	62	2
	+	62	0
	+	1	10
	+	10	9

> ~/prac/A.bat
	"	1	0

> ~/prac/generator.py
	"	7	0
	^	2	0
	.	1	23
	+	1	10
	+	1	14
	+	341	10
	+	1	0
	+	269	0
	+	278	0
	+	274	41
	+	276	0
	+	275	1
	+	282	0
	+	287	0
	+	291	0
	+	295	0
	+	299	0
	+	313	0
	+	321	0
	+	325	0
	+	327	0
	+	334	0
	+	329	0
	+	265	10
	+	179	10
	+	1	0
	+	92	0
	+	1	6
	+	133	170
	+	139	122
	+	169	13
	+	170	3
	+	171	4
	+	172	4
	+	173	4
	+	174	4
	+	168	34
	+	175	27
	+	176	0
	+	1	0
	+	93	0
	+	1	0
	+	180	1
	+	1	14
	+	90	10
	+	1	0
	+	3	0
	+	1	23

> ~/prac/clear.sh
	"	3	10
	^	3	11
	.	3	10
	+	3	10

> ~/prac/generator.pyt
	"	1	0

> /usr/share/vim/vim74/doc/help.txt
	"	1	0

> ~/prac/r
	"	1	0

> ~/ver
	"	1	0
